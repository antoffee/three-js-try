/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: mark2580 (https://sketchfab.com/mark2580)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/models/836312def1b84e588866500a2bf79f0f
title: Cat [Murdered: Soul Suspect]
*/

import React, { useEffect, useRef } from 'react';
import { useAnimations, useGLTF } from '@react-three/drei';
import * as THREE from 'three';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
    nodes: {
        ['sk_player_cat_lod0_Material_#81_0']: THREE.SkinnedMesh;
        ['sk_player_cat_lod0_Material_#105_0']: THREE.SkinnedMesh;
        ['sk_player_cat_lod0_Material_#93_0']: THREE.SkinnedMesh;
        _rootJoint: THREE.Bone;
    };
    materials: {
        Material_81: THREE.MeshBasicMaterial;
        Material_105: THREE.MeshBasicMaterial;
        Material_93: THREE.MeshBasicMaterial;
    };
};

const ACTION_NAME = 'Take 001';

export default function Model({ ...props }: JSX.IntrinsicElements['group']) {
    const group = useRef<THREE.Group>();
    const { nodes, materials, animations } = useGLTF('/gray-cat.gltf') as GLTFResult;

    const { actions } = useAnimations(animations, group);

    useEffect(() => {
        actions[ACTION_NAME]?.play();
    }, [actions]);

    return (
        <group ref={group} {...props} dispose={null}>
            <group name="OSG_Scene">
                <group name="RootNode_(gltf_orientation_matrix)" rotation={[-Math.PI / 2, 0, 0]}>
                    <group name="RootNode_(model_correction_matrix)">
                        <group name="catfbx" rotation={[Math.PI / 2, 0, 0]}>
                            <group>
                                <group name="RootNode">
                                    <group>
                                        <primitive object={nodes._rootJoint} />
                                        <group rotation={[-Math.PI / 2, 0, 0]} />
                                        <group name="sk_player_cat_lod0" rotation={[-Math.PI / 2, 0, 0]} />
                                        <skinnedMesh
                                            name="sk_player_cat_lod0_Material_#81_0"
                                            geometry={nodes['sk_player_cat_lod0_Material_#81_0'].geometry}
                                            material={materials.Material_81}
                                            skeleton={nodes['sk_player_cat_lod0_Material_#81_0'].skeleton}
                                        />
                                        <skinnedMesh
                                            name="sk_player_cat_lod0_Material_#105_0"
                                            geometry={nodes['sk_player_cat_lod0_Material_#105_0'].geometry}
                                            material={materials.Material_105}
                                            skeleton={nodes['sk_player_cat_lod0_Material_#105_0'].skeleton}
                                        />
                                        <skinnedMesh
                                            name="sk_player_cat_lod0_Material_#93_0"
                                            geometry={nodes['sk_player_cat_lod0_Material_#93_0'].geometry}
                                            material={materials.Material_93}
                                            skeleton={nodes['sk_player_cat_lod0_Material_#93_0'].skeleton}
                                        />
                                    </group>
                                </group>
                            </group>
                        </group>
                    </group>
                </group>
            </group>
        </group>
    );
}

useGLTF.preload('/gray-cat.gltf');
